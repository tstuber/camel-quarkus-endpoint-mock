# Configure Kafka consumer/producer.
# The following example uses SSL protection by using key and truststore from Kafka. Note that the passwords have
# to be injected by environment variables (for example reading OpenShift Secrets and mount them as environment
# variables).
# The example uses Avro date format in combination with a schema registry.
kafka.bootstrap.servers=cluster-main-kafka-bootstrap.kafka-devl.svc.cluster.local:9093
kafka.group.id=avro-consumer-group
kafka.topic=avro-topic
kafka.security.protocol=SSL
kafka.ssl.truststore.location=/deployments/kafka-certs/ca.p12
kafka.ssl.truststore.password=${KAFKA_TRUSTSTORE_PASSWORD}
kafka.ssl.truststore.type=pkcs12
kafka.ssl.keystore.location=/deployments/kafka-certs/user.p12
kafka.ssl.keystore.password=${KAFKA_KEYSTORE_PASSWORD}
kafka.ssl.keystore.type=pkcs12
kafka.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
kafka.value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
schema.registry.url=localhost:8081

# Override for local Dev VM tests (mvn quarkus:dev)
# In a local setup, there is secured Kafka cluster. Therefore, the security protocol is set to PLAINTEXT.
%dev.kafka.bootstrap.servers=localhost:9092
%dev.kafka.security.protocol=PLAINTEXT
%dev.kafka.ssl.keystore.password=dummy
%dev.kafka.ssl.truststore.password=dummy
%dev.schema.registry.url=http://localhost:8081

# Properties for Unittests
%test.kafka.ssl.truststore.password=IRRELEVANT
%test.kafka.ssl.keystore.password=IRRELEVANT
%test.kafka.bootstrap.servers=https://IRRELEVANT.org
%test.schema.registry.url=https://IRRELEVANT.org